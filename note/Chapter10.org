#+TITLE: Java编程思想学习笔记-第十章
#+CATEGORIES: Java
#+DESCRIPTION: ThinkingInJava学习笔记
#+KEYWORDS: Java
#+DATE: 2018-10-30 22:50

* 内部类
1. 可以将一个类的定义放在另一个类的定义内部,这就是内部类

 
** 使用.this和.new
1. 如果你需要生成对外部对象的引用,可以使用外部类的名字后紧跟原点和 ~this~
#+BEGIN_SRC java
package innerclasses;

public class DotThis {
    void f() {
        System.out.println("DotThis.f()");
    }

    public class Inner {
        public DotThis outer() {
            return DotThis.this;
            // A plain "this would be Inner's "this"
        }
    }

    public Inner inner() {
        return new Inner();
    }

    public static void main(String[] args) {
        DotThis dt = new DotThis();
        DotThis.Inner dti = dt.inner();
        dti.outer().f();
    }
}
#+END_SRC
2. 有时候想要告知某些其他对象去创建某个内部类的对象,必须在new表达式中提供对其他外部类对象的引用, ~.new~ 语法
#+BEGIN_SRC java
package innerclasses;

public class DotNew {
    public class Inner {}

    public static void main(String[] args) {
        DotNew dn = new DotNew();
        DotNew.Inner dni = dn.new Inner();
    }
}
#+END_SRC


** 方法或者作用域内的内部类
1. 在方法中的内部类,称为局部内部类
#+BEGIN_SRC java
package innerclasses;

public class Parcel5 {
    public Destination destination(String s) {
        // 在方法中的内部类,局部内部类
        class PDestination implements Destination {
            private String label;
            private PDestination(String whereTo) {
                label = whereTo;
            }
            @Override
            public String readLabel() {
                return label;
            }
        }
        return new PDestination(s);
    }

    public static void main(String[] args) {
        Parcel5 p = new Parcel5();
        Destination d = p.destination("Tasmania");
    }
}
#+END_SRC

** 匿名内部类
1. 匿名内部类末尾的分好,并不是用来标记此内部类的结束的,实际上,它标记的是表达式的结束.
2. 如果定义一个匿名内部类,并且希望它使用一个在其外部定义的对象,那么编译器会要求其参数引用是final的.(jdk8后没有该问题出现)
3. 匿名内部类想要实现构造器的行为,可以使用代码块进行示例初始化,因为匿名内部类中不可能有命名构造器.
4. 匿名内部类与正规的继承相比有些受限,因为匿名内部类即可以扩展类,也可以实现接口,但是不能两者兼备.而且如果是实现接口,也只能是实现一个接口.


** 嵌套类
1. 如果不需要内部类对象与其外围类对象之间有联系,那么可以将内部类声明为static.
2. 普通的内部类对象隐式地保存了一个引用,指向创建它的外围类对象.
3. 当内部类为static(即嵌套类)
   - 要创建嵌套类的对象,并不需要其外围类的对象
   - 不能从嵌套类的对象中访问非静态的外围类
4. 普通内部类的字段与方法,只能放在类的外部层次上,所以普通的内部类不能由static数据和static字段,也不能包含嵌套类.但嵌套类可以包含所有这些东西

   
** 接口内部的类
1. 嵌套类可以作为接口的一部分,因为接口中的任何类都是自动是public和static的,所以其作用就是将嵌套类置于接口的命名空间内.
2. 一般用在:想要创建某些公共代码,使得它们可以被某个接口的所有不同实现所共用.
   
** 从多层嵌套类中访问外部类的成员
1. 一个内部类被嵌套多少层并不重要,它能透明的访问所有它所嵌入的外围类的所有成员.

** 为什么需要内部类
1. 每个内部类都能独立地继承自一个(接口的)实现,所以无论外围类是否已经继承了某个(接口的)实现,对于内部类都没有影响.
2. 如果拥有的是抽象的类或具体的类,而不是接口,那就只能使用内部类才能实现多重继承.

   
** 闭包与回调
1. 闭包(closure)是一个可调用的对象,它记录了一些信息,这些信息来自于创建它的作用域.
2. 通过闭包的定义可以知道内部类是面向对象的闭包.


** 内部类的继承
1. 因为内部类的构造器必须连接到指向其外围类对象的引用,所以在继承内部类的时候,情况会变得复杂.
#+BEGIN_SRC java
package innerclasses;

class WithInner {
    class Inner {

    }
}

public class InheritInner extends WithInner.Inner{
    //! InheritInner() {} // Won't compile
    InheritInner(WithInner wi) {
        wi.super();
    }

    public static void main(String[] args) {
        WithInner wi = new WithInner();
        InheritInner ii = new InheritInner(wi);
    }
}
#+END_SRC

** 内部类可以被覆盖吗?
1. 如果创建一个内部类,然后继承其外围类并重新定义内部类时,不会覆盖原有的内部类,两个同名的内部类是完全独立的两个实体.

   
** 内部类标识符
1. 每个类都会产生一个 ~.class~ 文件,命名规则:外围类的名字+ ~$~ + 内部类的名字.
